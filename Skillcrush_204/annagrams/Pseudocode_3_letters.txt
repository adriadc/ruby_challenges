Create an array OF 3 letters
Ex ate, cat, top
print out the array to see what the data is

create a method to hold the array

move one letter to the right or reverse the letters by moving one letter to the right

Loop through each letter to create new words

Print out the reversed array

Unknown is dicitonary a method in ruby
How to get dictionary words in the array
Check out Enumerable
http://ruby-doc.org/core-2.2.1/Enumerable.html
check out how to do an array
http://ruby-doc.org/core-2.2.0/Array.html
Google 
http://ruby-doc.org/core-2.2.3/Array.html
To delete an element at a particular index:

arr.delete_at(2) #=> 4
arr #=> [2, 3, 5]

To delete a particular element anywhere in an array, use delete:

arr = [1, 2, 2, 3]
arr.delete(2) #=> 2
arr #=> [1,3]

In the last form, an array of the given size is created. Each element in this array is created by passing the elementâ€™s index to the given block and storing the return value.

Array.new(3){ |index| index ** 2 }
# => [0, 1, 4]

http://stackoverflow.com/questions/5212972/ruby-longest-word-in-array

class Array
  def longest_word
    # Convert array elements to strings in the event that they're not.
    test_array = self.collect { |e| e.to_s }
    test_array.inject() do |word, comparison|
      if word.kind_of?(Array) then
        if word[0].length == comparison.length then
          word << comparison
        else
          word[0].length > comparison.length ? word : comparison
        end
      else
        # If words are equal, they are pushed into an array
        if word.length == comparison.length then
          the_words = Array.new
          the_words << word
          the_words << comparison
        else
          word.length > comparison.length ? word : comparison
        end
      end
    end
  end
end

class Array
  def longest_word
    group_by(&:size).max.last
  end
end

http://ruby-doc.org/core-2.2.1/Enumerable.html
Enumerate

If no block is given, an enumerator is returned instead.

hash = Hash.new
%w(cat dog wombat).each_with_index { |item, index|
  hash[item] = index
}
hash   #=> {"cat"=>0, "dog"=>1, "wombat"=>2}

used in method with no success
word_hash = words.each_with_object(Hash.new []) do |word, hash|
      hash[word.chars.sort] += [word]

  #from Stack Overflow
  Using Jerry Coffin's approach, you get something like

  def characters_in_string(string)
  string.downcase.gsub(/\s/, '').chars.sort
end

def anagrams?(string1, string2)
  characters_in_string(string1) == characters_in_string(string2)
end

if anagrams?(ARGV[0], ARGV[1])
  puts "Anagrams!"
else
  puts "Not anagrams"
  exit 1
end


